SET NOCOUNT ON;

/* Thanks to https://gist.github.com/joey-qc for his original script that I has modified to suit my own need. */

PRINT '//==========================================='
PRINT '// Generated by SQL POCO-Generator script';
PRINT '// Date    : ' + CONVERT(CHAR(16), GETDATE(), 120);
PRINT '// Server  : ' + @@SERVERNAME;
PRINT '// Database: ' + DB_NAME();
PRINT '//==========================================='
PRINT ''

DECLARE @baseClass		VARCHAR(200);
DECLARE @includeViews	BIT;
DECLARE @tableName		VARCHAR(200);
DECLARE @columnName		VARCHAR(200);
DECLARE @nullable		VARCHAR(50);
DECLARE @datatype		VARCHAR(50);
DECLARE @maxlen			INT;

DECLARE @sType			VARCHAR(50);
DECLARE @sProperty		VARCHAR(200);

DECLARE @tTablePK		TABLE([TableName] sysname NOT NULL, [ColumnName] sysname NOT NULL);
DECLARE @tTableExludes	TABLE([Name] sysname NOT NULL);
DECLARE @tColumnExludes TABLE([Name] sysname NOT NULL);

/* ==== Set Options ============================================ 

	- Set @baseClass if you want to set Class inheritage, 
	  otherwise set to NULL 

	- Set @includeViews = 1 to include Views,
	  otherwise set to 0 or NULL

================================================================*/

SET @baseClass		= 'BaseModel'; 
SET @includeViews	= 0;

/* ==== End Set Options ======================================== */


/* ==== Get Primary Keys ======================================= 

	- Retreives Primary Keys from INFROMATION_SCHEMA

================================================================*/

INSERT INTO @tTablePK
SELECT
	CU.TABLE_NAME AS TABLENAME,
	CU.COLUMN_NAME AS PK
FROM
	INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC
INNER JOIN
	INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS CU
		ON TC.CONSTRAINT_TYPE = 'PRIMARY KEY'
		   AND TC.CONSTRAINT_NAME = CU.CONSTRAINT_NAME
ORDER BY
	CU.TABLE_NAME,
	CU.ORDINAL_POSITION;

/* ==== End Get Primary Keys =================================== */


/* ==== Set Table and Column exludes =========================== 

	- Support wildcards

================================================================*/

INSERT INTO @tTableExludes ([Name])
VALUES 
	('sysdiagrams'),
	('%_tracking'),
	('scope_info')

INSERT INTO @tColumnExludes ([Name])
VALUES 
	('created'),
	('updated')

/* ==== End Set Table and Column exludes ======================= */

DECLARE table_cursor CURSOR LOCAL READ_ONLY FORWARD_ONLY FOR
SELECT
	T.TABLE_NAME
FROM
	[INFORMATION_SCHEMA].[TABLES] T
WHERE
	NOT EXISTS(SELECT * FROM @tTableExludes E WHERE T.TABLE_NAME LIKE E.Name)
	AND T.TABLE_TYPE = IIF(ISNULL(@includeViews, 0) = 1, T.TABLE_TYPE, 'BASE TABLE')

OPEN table_cursor;

FETCH NEXT FROM table_cursor
INTO
	@tableName;

WHILE @@FETCH_STATUS = 0
BEGIN

	PRINT 'public class ' + @tableName + IIF(@baseClass IS NULL, '', ' : ' + @baseClass) + ' {';
	PRINT '';

	DECLARE column_cursor CURSOR LOCAL READ_ONLY FORWARD_ONLY FOR
	SELECT
		COLUMN_NAME,
		IS_NULLABLE,
		DATA_TYPE,
		ISNULL(CHARACTER_MAXIMUM_LENGTH, '-1')
	FROM
		[INFORMATION_SCHEMA].[COLUMNS] C
	WHERE
		C.[TABLE_NAME] = @tableName
		AND NOT EXISTS(SELECT [Name] FROM @tColumnExludes E WHERE E.Name = C.COLUMN_NAME )
	ORDER BY
		[ORDINAL_POSITION];

	OPEN column_cursor;
	FETCH NEXT FROM column_cursor
	INTO
		@columnName,
		@nullable,
		@datatype,
		@maxlen;

	WHILE @@FETCH_STATUS = 0
	BEGIN

		-- datatype
		SELECT
			@sType = CASE @datatype
						 WHEN 'int' 				THEN 'Int32'
						 WHEN 'decimal' 			THEN 'Decimal'
						 WHEN 'money' 				THEN 'Decimal'
						 WHEN 'char' 				THEN 'String'
						 WHEN 'nchar' 				THEN 'String'
						 WHEN 'varchar' 			THEN 'String'
						 WHEN 'nvarchar' 			THEN 'String'
						 WHEN 'uniqueidentifier' 	THEN 'Guid'
						 WHEN 'datetime' 			THEN 'DateTime'
						 WHEN 'smalldatetime' 		THEN 'DateTime'
						 WHEN 'bit' 				THEN 'Boolean'
						 ELSE 'Objekt ' /* To support unhandled SQL Types. Write the original type as a commment at the Property */
					 END;

		IF EXISTS(SELECT * FROM @tTablePK WHERE TableName = @tableName AND ColumnName = @columnName)
			PRINT '[Key]';

		IF (@nullable = 'NO')
			PRINT '[Required]';

		IF (@sType = 'String' AND @maxlen <> '-1')
			PRINT '[MaxLength(' + CONVERT(VARCHAR(4), @maxlen) + ')]';
		
		SET @sProperty = 'public ' + @sType + ' ' + @columnName + ' { get; set;}';
		PRINT @sProperty + IIF(@sType = 'Objekt', ' // SQL Type: ' + @datatype, '') ;

		PRINT '';
		FETCH NEXT FROM column_cursor
		INTO
			@columnName,
			@nullable,
			@datatype,
			@maxlen;
	END;
	CLOSE column_cursor;
	DEALLOCATE column_cursor;

	PRINT '}';
	PRINT '';
	FETCH NEXT FROM table_cursor
	INTO
		@tableName;
END;
CLOSE table_cursor;
DEALLOCATE table_cursor;
